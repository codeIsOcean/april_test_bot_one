# services/new_member_requested_to_join_mute_logic.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot
from aiogram.types import ChatMemberUpdated, ChatPermissions
from aiogram.enums import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, insert

from bot.services.redis_conn import redis
from bot.database.models import ChatSettings
from bot.database.session import get_session
from bot.services.scammer_tracker_logic import track_captcha_failure

logger = logging.getLogger(__name__)


async def get_mute_new_members_status(chat_id: int, session: AsyncSession = None) -> bool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Redis, –∑–∞—Ç–µ–º –ë–î
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        mute_enabled = await redis.get(f"group:{chat_id}:mute_new_members")
        
        if mute_enabled is not None:
            return mute_enabled == "1"
        
        # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        if session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings and hasattr(settings, 'mute_new_members'):
                mute_enabled = "1" if settings.mute_new_members else "0"
                # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                await redis.set(f"group:{chat_id}:mute_new_members", mute_enabled)
                return settings.mute_new_members
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                await redis.set(f"group:{chat_id}:mute_new_members", "0")
                return False
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            async with get_session() as new_session:
                result = await new_session.execute(
                    select(ChatSettings).where(ChatSettings.chat_id == chat_id)
                )
                settings = result.scalar_one_or_none()
                
                if settings and hasattr(settings, 'mute_new_members'):
                    mute_enabled = "1" if settings.mute_new_members else "0"
                    # –û–±–Ω–æ–≤–ª—è–µ–º Redis
                    await redis.set(f"group:{chat_id}:mute_new_members", mute_enabled)
                    return settings.mute_new_members
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
                    await redis.set(f"group:{chat_id}:mute_new_members", "0")
                    return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False


async def set_mute_new_members_status(chat_id: int, enabled: bool) -> bool:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis –∏ –ë–î
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
        await redis.set(f"group:{chat_id}:mute_new_members", "1" if enabled else "0")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with get_session() as session:
            result = await session.execute(
                select(ChatSettings).where(ChatSettings.chat_id == chat_id)
            )
            settings = result.scalar_one_or_none()
            
            if settings:
                await session.execute(
                    update(ChatSettings)
                    .where(ChatSettings.chat_id == chat_id)
                    .values(mute_new_members=enabled)
                )
            else:
                await session.execute(
                    insert(ChatSettings).values(
                        chat_id=chat_id,
                        mute_new_members=enabled,
                        enable_photo_filter=False,
                        admins_bypass_photo_filter=False,
                        photo_filter_mute_minutes=60
                    )
                )
            
            await session.commit()
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}")
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º—É—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
        return False


async def mute_unapproved_member(bot: Bot, event: ChatMemberUpdated) -> bool:
    """
    –ù–ï –º—É—Ç–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    –ú—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ manually_mute_on_approval –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä—è–µ—Ç.
    """
    try:
        chat_id = event.chat.id
        user = event.new_chat_member.user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        mute_enabled = await get_mute_new_members_status(chat_id)
        
        if not mute_enabled:
            logger.debug(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        is_approved = getattr(event.new_chat_member, 'is_approved', True)
        
        logger.info(f"üîç Chat member update: user={user.id}, old={old_status}, new={new_status}, approved={is_approved}")
        
        # –ù–ï –º—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –º—É—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –º—É—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º")
        
        return False
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ chat member update: {str(e)}")
        return False


async def mute_manually_approved_member(bot: Bot, event: ChatMemberUpdated) -> bool:
    """
    –ú—É—Ç–∏—Ç –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    try:
        old_status = event.old_chat_member.status
        new_status = event.new_chat_member.status
        
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ chat_member: {event.from_user.id} | old={old_status} -> new={new_status}")
        
        if old_status in ("left", "kicked") and new_status == "member":
            chat_id = event.chat.id
            user = event.new_chat_member.user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º—É—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            mute_enabled = await get_mute_new_members_status(chat_id)
            
            if not mute_enabled:
                logger.debug(f"–ú—É—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º—É—Ç–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä—É—á–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —Å—Ç–∞—Ç—É—Å–µ "requested" –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º
            if old_status not in ("left", "kicked"):
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –±—ã–ª –≤ —Å—Ç–∞—Ç—É—Å–µ left/kicked, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º—É—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–ø—á—É
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –º—É—Ç–∏—Ç—å—Å—è
            captcha_passed = await redis.get(f"captcha_passed:{user.id}:{chat_id}")
            if captcha_passed:
                logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –Ω–µ –º—É—Ç–∏–º")
                return False
            
            logger.info(f"üîá –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.id} –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user.id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=datetime.now() + timedelta(days=366 * 10)
            )
            
            await asyncio.sleep(1)
            logger.info(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.id} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è (chat_member).")
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å–∫–∞–º–º–µ—Ä–∞
            try:
                async with get_session() as session:
                    await track_captcha_failure(
                        session,
                        user.id,
                        chat_id,
                        user.username,
                        user.first_name,
                        user.last_name,
                        violation_type="manual_mute_by_admin"
                    )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–º–µ—Ä–æ–≤ –∑–∞ –º—É—Ç –∞–¥–º–∏–Ω–æ–º")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–∫–∞–º–º–µ—Ä–∞: {e}")
            
            return True
        else:
            logger.debug(f"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. old={old_status}, new={new_status}")
            return False
            
    except Exception as e:
        logger.error(f"MUTE ERROR (variant 2 - manual chat_member): {str(e)}")
        return False


async def create_mute_settings_keyboard(chat_id: int, session: AsyncSession = None) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    mute_enabled = await get_mute_new_members_status(chat_id, session)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å –≥–∞–ª–æ—á–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    enable_text = "‚úì –í–∫–ª—é—á–∏—Ç—å" if mute_enabled else "–í–∫–ª—é—á–∏—Ç—å"
    disable_text = "‚úì –í—ã–∫–ª—é—á–∏—Ç—å" if not mute_enabled else "–í—ã–∫–ª—é—á–∏—Ç—å"
    
    keyboard_data = {
        "buttons": [
            [
                {"text": enable_text, "callback_data": f"mute_new_members:enable:{chat_id}"},
                {"text": disable_text, "callback_data": f"mute_new_members:disable:{chat_id}"}
            ],
            [{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back_to_groups"}]
        ],
        "status": mute_enabled  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
    
    return keyboard_data


async def get_mute_settings_text(status: bool = False) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if status else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
    return (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –º—É—Ç\n"
        f"‚Ä¢ –ú—É—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç 3660 –¥–Ω–µ–π\n"
        f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status_text}\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à—É –≥—Ä—É–ø–ø—É –æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤."
    )
