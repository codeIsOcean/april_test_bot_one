from calendar import error

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from bot.services.groups_settings_in_private_logic import (
    get_admin_groups,
    check_admin_rights,
    get_group_by_chat_id,
    get_visual_captcha_status,
    toggle_visual_captcha,
    get_mute_new_members_status
)
from bot.services.new_member_requested_to_join_mute_logic import (
    create_mute_settings_keyboard,
    get_mute_settings_text
)
import logging

logger = logging.getLogger(__name__)
group_settings_router = Router()


@group_settings_router.message(Command("settings"))
async def settings_command(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_groups = await get_admin_groups(user_id, session)

        if not user_groups:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        keyboard = create_groups_keyboard(user_groups)

        text = "üè† **–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /settings: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")


@group_settings_router.callback_query(F.data.startswith("manage_group_"))
async def manage_group_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = await get_group_by_chat_id(session, chat_id)
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π
        await send_group_management_menu(callback.message, session, group)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("toggle_visual_captcha_"))
async def toggle_visual_captcha_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏"""
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        new_status = await toggle_visual_captcha(session, chat_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        group = await get_group_by_chat_id(session, chat_id)
        keyboard = await create_group_management_keyboard(session, chat_id)

        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer(f"‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ {status_text}", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members_settings_"))
async def mute_new_members_settings_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_data = await create_mute_settings_keyboard(chat_id, session)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                for btn in row
            ]
            for row in keyboard_data["buttons"]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = await get_mute_settings_text(status=keyboard_data["status"])
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members:enable:"))
async def enable_mute_new_members_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split(":")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        # –í–∫–ª—é—á–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        from bot.services.new_member_requested_to_join_mute_logic import set_mute_new_members_status
        success = await set_mute_new_members_status(chat_id, True)
        
        if success:
            await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")

            # üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            keyboard_data = await create_mute_settings_keyboard(chat_id, session)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                    for btn in row
                ]
                for row in keyboard_data["buttons"]
            ])

            message_text = await get_mute_settings_text(status=keyboard_data["status"])

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )


        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data.startswith("mute_new_members:disable:"))
async def disable_mute_new_members_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        chat_id = int(callback.data.split(":")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if not await check_admin_rights(session, user_id, chat_id):
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        # –í—ã–∫–ª—é—á–∞–µ–º –º—É—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        from bot.services.new_member_requested_to_join_mute_logic import set_mute_new_members_status
        success = await set_mute_new_members_status(chat_id, False)
        
        if success:
          
            await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞")

            # üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
            keyboard_data = await create_mute_settings_keyboard(chat_id, session)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])
                    for btn in row
                ]
                for row in keyboard_data["buttons"]
            ])

            message_text = await get_mute_settings_text(status=keyboard_data["status"])

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@group_settings_router.callback_query(F.data == "back_to_groups")
async def back_to_groups_callback(callback: types.CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø"""
    user_id = callback.from_user.id
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        user_groups = await get_admin_groups(user_id, session)

        if not user_groups:
            await callback.message.edit_text(" ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç")
            return
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        keyboard = create_groups_keyboard(user_groups)

        text = "üè† ** –í–∞—à–∏ –≥—Ä—É–ø–ø—ã: **\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–π –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø.")
    await callback.answer()


    # # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É settings
    # await settings_command(callback.message, session)
    # await callback.answer()


def create_groups_keyboard(groups):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø —Å callback –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for group in groups:
        button = InlineKeyboardButton(
            text=f"‚öôÔ∏è {group.title}",
            callback_data=f"manage_group_{group.chat_id}"
        )
        keyboard.inline_keyboard.append([button])

    return keyboard


async def send_group_management_menu(message: types.Message, session: AsyncSession, group):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π"""
    text = f"‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π**\n\n"
    text += f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {group.title}\n"
    text += f"üÜî **ID:** `{group.chat_id}`\n\n"
    text += "üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**"

    keyboard = await create_group_management_keyboard(session, group.chat_id)

    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


async def create_group_management_keyboard(session: AsyncSession, chat_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    visual_captcha_status = await get_visual_captcha_status(session, chat_id)
    visual_captcha_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É" if visual_captcha_status else "üü¢ –í–∫–ª—é—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∫–∞–ø—á—É"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    mute_status = await get_mute_new_members_status(session, chat_id)
    mute_text = "üîá –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=visual_captcha_text,
            callback_data=f"toggle_visual_captcha_{chat_id}"
        )],
        [InlineKeyboardButton(
            text=mute_text,
            callback_data=f"mute_new_members_settings_{chat_id}"
        )],
        [InlineKeyboardButton(
            text="üì¢ –†–∞—Å—Å—ã–ª–∫–∏",
            callback_data="broadcast_settings"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø",
            callback_data="back_to_groups"
        )]
    ])

    return keyboard
