from aiogram import Router, F, Bot
from aiogram.types import ChatMemberUpdated, CallbackQuery
from aiogram.filters import ChatMemberUpdatedFilter
from aiogram.enums import ChatMemberStatus
from bot.services.new_member_requested_to_join_mute_logic import (
    get_mute_settings_menu,
    enable_mute_for_group,
    disable_mute_for_group,
    mute_unapproved_member_logic,
    mute_manually_approved_member_logic
)
import logging

logger = logging.getLogger(__name__)
new_member_requested_handler = Router()


@new_member_requested_handler.callback_query(F.data.startswith("new_member_requested_handler_settings"))
async def new_member_requested_handler_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        user_id = callback.from_user.id
        logger.info(f"üîç [MUTE_HANDLER] –í—ã–∑–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üîç [MUTE_HANDLER] Callback data: {callback.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ chat_id –≤ callback_data
        if ":" in callback.data:
            chat_id = int(callback.data.split(":")[-1])
            logger.info(f"üîç [MUTE_HANDLER] Chat ID –∏–∑ callback: {chat_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ Redis –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            from bot.services.redis_conn import redis
            await redis.hset(f"user:{user_id}", "group_id", str(chat_id))
            await redis.expire(f"user:{user_id}", 30 * 60)
            logger.info(f"‚úÖ [MUTE_HANDLER] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ user:{user_id} -> group:{chat_id}")
        
        await get_mute_settings_menu(callback)
        await callback.answer()  # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–Ω–æ–ø–∫–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ new_member_requested_handler_settings: {e}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback.answer()


# ‚úÖ –ú—É—Ç —á–µ—Ä–µ–∑ RESTRICTED —Å—Ç–∞—Ç—É—Å (–∫–æ–≥–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–¥—ë—Ç —á–µ—Ä–µ–∑ join_request)
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(None, ChatMemberStatus.RESTRICTED)
    )
)
async def mute_handler(event: ChatMemberUpdated):
    """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    await mute_unapproved_member(event)


# ‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_member –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"})
)
async def manually_mute_on_approval(event: ChatMemberUpdated):
    """–ú—É—Ç –≤—Ä—É—á–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ Telegram –ø—Ä–∏—Å–ª–∞–ª —Å–æ–±—ã—Ç–∏–µ"""
    try:
        await mute_manually_approved_member_logic(event)
    except Exception as e:
        logger.error(f"MUTE ERROR (variant 2 - manual chat_member): {str(e)}")


# ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤
@new_member_requested_handler.chat_member(
    F.chat.type.in_({"group", "supergroup"}),
    ChatMemberUpdatedFilter(
        member_status_changed=(ChatMemberStatus.RESTRICTED, ChatMemberStatus.MEMBER)
    )
)
async def recheck_approved_member(event: ChatMemberUpdated):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –º—É—Ç–∏–º, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"""
    await mute_unapproved_member(event)


@new_member_requested_handler.callback_query(F.data == "mute_new_members:enable")
async def enable_mute_new_members(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        await enable_mute_for_group(callback)
        await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback.answer()


@new_member_requested_handler.callback_query(F.data == "mute_new_members:disable")
async def disable_mute_new_members(callback: CallbackQuery):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        await disable_mute_for_group(callback)
        await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –º—É—Ç–∞: {e}")
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback.answer()


async def mute_unapproved_member(event: ChatMemberUpdated):
    """–ú—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏–µ"""
    try:
        await mute_unapproved_member_logic(event)
    except Exception as e:
        logger.error(f"üí• MUTE ERROR: {str(e)}")