# handlers/bot_activity_journal/bot_activity_journal.py
import logging
from aiogram import Router, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional, Dict, Any
from datetime import datetime
import pytz

logger = logging.getLogger(__name__)

bot_activity_journal_router = Router()

from bot.config import LOG_CHANNEL_ID

async def send_activity_log(
    bot: Bot,
    event_type: str,
    user_data: Dict[str, Any],
    group_data: Dict[str, Any],
    additional_info: Optional[Dict[str, Any]] = None,
    status: str = "success"
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∂—É—Ä–Ω–∞–ª–∞
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï, –ù–æ–≤—ã–π–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, etc.)
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        group_data: –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status: –°—Ç–∞—Ç—É—Å (success, failed, etc.)
    """
    try:
        logger.info(f"üìù –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        message_text = await format_activity_message(
            event_type, user_data, group_data, additional_info, status
        )
        
        logger.info(f"üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = await create_activity_keyboard(event_type, user_data, group_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(
            chat_id=LOG_CHANNEL_ID,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id')}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {str(e)}")


async def format_activity_message(
    event_type: str,
    user_data: Dict[str, Any],
    group_data: Dict[str, Any],
    additional_info: Optional[Dict[str, Any]] = None,
    status: str = "success"
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ GST
    gst_tz = pytz.timezone('Asia/Dubai')
    current_time = datetime.now(gst_tz).strftime("%d %B %Y –≥. %H:%M:%S GST")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = user_data.get('user_id', 'N/A')
    username = user_data.get('username', '') or ''
    first_name = user_data.get('first_name', '') or ''
    last_name = user_data.get('last_name', '') or ''
    
    user_display = f"{first_name} {last_name}".strip()
    if username:
        user_display += f" [@{username}]"
    user_display += f" [{user_id}]"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group_title = group_data.get('title', 'N/A')
    group_username = group_data.get('username', '')
    group_id = group_data.get('chat_id', 'N/A')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
    if group_username:
        group_display = f"<a href='https://t.me/{group_username}'>{group_title}</a> (https://t.me/{group_username}) [@{group_username}][{group_id}]"
    else:
        group_display = f"<b>{group_title}</b> [{group_id}]"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = "üü¢" if status == "success" else "üî¥"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    if event_type == "–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï":
        message = f"üì¨ #{event_type} {status_emoji}\n\n"
        message += f"‚Ä¢ –ö—Ç–æ: {user_display}\n"
        message += f"‚Ä¢ –ì—Ä—É–ø–ø–∞: {group_display}\n"
        
        if additional_info:
            captcha_status = additional_info.get('captcha_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            saved_to_db = additional_info.get('saved_to_db', False)
            message += f"#id{user_id} #{captcha_status} #RECAPTCHA\n"
            message += f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–¥? {'–¥–∞' if saved_to_db else '–Ω–µ—Ç'}\n"
        
        message += f"üëã–í—Ä–µ–º—è: {current_time}"
        
    elif event_type == "–ù–æ–≤—ã–π–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
        message = f"üÜî #{event_type} –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n\n"
        message += f"–ì—Ä—É–ø–ø–∞: {group_display} #c{group_id}\n"
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display} #user{user_id}\n"
        message += f"üëã–í—Ä–µ–º—è: {current_time}"
        
    elif event_type == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—É–¥–∞–ª–µ–Ω":
        initiator_data = additional_info.get('initiator', {}) if additional_info else {}
        first_name = initiator_data.get('first_name', '') or ''
        last_name = initiator_data.get('last_name', '') or ''
        initiator_name = f"{first_name} {last_name}".strip()
        initiator_username = initiator_data.get('username', '') or ''
        initiator_id = initiator_data.get('user_id', 'N/A')
        
        initiator_display = initiator_name
        if initiator_username:
            initiator_display += f" [@{initiator_username}]"
        initiator_display += f"[{initiator_id}]"
        
        message = f"‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ #{event_type}\n\n"
        message += f"–ì—Ä—É–ø–ø–∞: {group_display} #c{group_id}\n"
        message += f"–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {initiator_display} #user{initiator_id}\n"
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display} #user{user_id}\n"
        message += f"–î–µ–π—Å—Ç–≤–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã #kicked\n"
        message += f"‚úâÔ∏è–í—Ä–µ–º—è: {current_time}"
        
    elif event_type == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–≤—ã—à–µ–ª":
        message = f"‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç #{event_type}\n\n"
        message += f"–ì—Ä—É–ø–ø–∞: {group_display} #c{group_id}\n"
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display} #user{user_id}\n"
        message += f"üëã–í—Ä–µ–º—è: {current_time}"
        
    elif event_type == "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞":
        message = f"üîê <b>#–í–∏–∑—É–∞–ª—å–Ω–∞—è_–∫–∞–ø—á–∞_–≤–∫–ª—é—á–µ–Ω–∞</b>\n\n"
        message += f"üë§ <b>–ö—Ç–æ:</b> {user_display}\n"
        message += f"üè¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_display}\n"
        message += f"‚è∞ <b>–ö–æ–≥–¥–∞:</b> {current_time}"
        
    elif event_type == "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞–ø—á–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞":
        message = f"üîì <b>#–í–∏–∑—É–∞–ª—å–Ω–∞—è_–∫–∞–ø—á–∞_–≤—ã–∫–ª—é—á–µ–Ω–∞</b>\n\n"
        message += f"üë§ <b>–ö—Ç–æ:</b> {user_display}\n"
        message += f"üè¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_display}\n"
        message += f"‚è∞ <b>–ö–æ–≥–¥–∞:</b> {current_time}"
        
    elif event_type == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–∞":
        message = f"üîá <b>#–ù–∞—Å—Ç—Ä–æ–π–∫–∞_–º—É—Ç–∞_–≤–∫–ª—é—á–µ–Ω–∞</b>\n\n"
        message += f"üë§ <b>–ö—Ç–æ:</b> {user_display}\n"
        message += f"üè¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_display}\n"
        message += f"‚è∞ <b>–ö–æ–≥–¥–∞:</b> {current_time}"
        
    elif event_type == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º—É—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω–∞":
        message = f"üîä <b>#–ù–∞—Å—Ç—Ä–æ–π–∫–∞_–º—É—Ç–∞_–≤—ã–∫–ª—é—á–µ–Ω–∞</b>\n\n"
        message += f"üë§ <b>–ö—Ç–æ:</b> {user_display}\n"
        message += f"üè¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_display}\n"
        message += f"‚è∞ <b>–ö–æ–≥–¥–∞:</b> {current_time}"
        
    elif event_type == "–ë–û–¢_–î–û–ë–ê–í–õ–ï–ù_–í_–ì–†–£–ü–ü–£":
        added_by_data = additional_info.get('added_by', {}) if additional_info else {}
        first_name = added_by_data.get('first_name', '') or ''
        last_name = added_by_data.get('last_name', '') or ''
        added_by_name = f"{first_name} {last_name}".strip()
        added_by_username = added_by_data.get('username', '') or ''
        added_by_id = added_by_data.get('user_id', 'N/A')
        
        added_by_display = added_by_name
        if added_by_username:
            added_by_display += f" [@{added_by_username}]"
        added_by_display += f" [{added_by_id}]"
        
        message = f"ü§ñ <b>#–ë–û–¢_–î–û–ë–ê–í–õ–ï–ù_–í_–ì–†–£–ü–ü–£</b>\n\n"
        message += f"üë§ <b>–ö—Ç–æ –¥–æ–±–∞–≤–∏–ª:</b> {added_by_display}\n"
        message += f"üè¢ <b>–ì—Ä—É–ø–ø–∞:</b> {group_display}\n"
        message += f"‚è∞ <b>–ö–æ–≥–¥–∞:</b> {current_time}"
        
    else:
        # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        message = f"üìù #{event_type}\n\n"
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
        message += f"–ì—Ä—É–ø–ø–∞: {group_display}\n"
        message += f"–í—Ä–µ–º—è: {current_time}"
    
    return message


async def create_activity_keyboard(
    event_type: str,
    user_data: Dict[str, Any],
    group_data: Dict[str, Any]
) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞"""
    
    buttons = []
    
    if event_type == "–ó–ê–ü–†–û–°_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï":
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –í–ø—É—Å—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",
                callback_data=f"approve_user_{user_data.get('user_id')}_{group_data.get('chat_id')}"
            ),
            InlineKeyboardButton(
                text="üîá –ú—É—Ç –Ω–∞–≤—Å–µ–≥–¥–∞",
                callback_data=f"mute_user_{user_data.get('user_id')}_{group_data.get('chat_id')}"
            )
        ])
        
    elif event_type == "–ù–æ–≤—ã–π–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        buttons.append([
            InlineKeyboardButton(
                text="üîá –ú—É—Ç",
                callback_data=f"mute_user_{user_data.get('user_id')}_{group_data.get('chat_id')}"
            ),
            InlineKeyboardButton(
                text="üö´ –ë–∞–Ω",
                callback_data=f"ban_user_{user_data.get('user_id')}_{group_data.get('chat_id')}"
            )
        ])
    
    if buttons:
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@bot_activity_journal_router.callback_query(lambda c: c.data.startswith("approve_user_"))
async def approve_user_callback(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        user_id = int(parts[2])
        group_id = int(parts[3])
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏", show_alert=True)


@bot_activity_journal_router.callback_query(lambda c: c.data.startswith("mute_user_"))
async def mute_user_callback(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        user_id = int(parts[2])
        group_id = int(parts[3])
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ", show_alert=True)


@bot_activity_journal_router.callback_query(lambda c: c.data.startswith("ban_user_"))
async def ban_user_callback(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        user_id = int(parts[2])
        group_id = int(parts[3])
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ", show_alert=True)
